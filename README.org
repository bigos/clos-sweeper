* clos-sweeper

[[file:screenshot-won.png]]


A toy mine sweeper written in Common Lisp. Left mouse click uncovers the boxes.
Right mouse click toggles the mine state. There are two different colours for
right clicked boxes. Pink if there is a mine in that field and purple for
flagged field without mine. This makes it helpful to solve even the large grid.


I can not find the way to create a small zipped folder to distribute Windows executable.
If you happen to know how to do it please provide advice.

**  License

Public Domain

** Libraries

https://github.com/bohonghuang/cl-gtk4

https://lispcookbook.github.io/cl-cookbook/clos.html

** Setup

Make sure SBCL is installed

Make sure you have quicklisp and ultralisp installed.

https://www.quicklisp.org/beta/

https://ultralisp.org/

Make sure you have gtk4 libraries installed.

*** Linux
On Ubuntu like Linux you run: sudo apt install libgtk-4-dev

*** Windows
First I installed Emacs from using the installer from
https://www.gnu.org/software/emacs/download.html#nonfree

Then I installed SBCL 2.3.2
http://www.sbcl.org/platform-table.html

Then I installed MSYS2
https://www.msys2.org/

On Windows 11 with MSYS2 run MINGW64 terminal and execute:
#+begin_example
  pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gtk4 mingw-w64-x86_64-cairo mingw-w64-x86_64-gobject-introspection
#+end_example

*** Cmd files
I have a *.cmd c=script that starts Emacs with correct environment setting

#+begin_example
set PATH=c:/msys64/mingw64/bin;c:/msys64/usr/bin;%PATH%

C:\"Program Files"\Emacs\emacs-29.1\bin\runemacs.exe
#+end_example

Also I have a similar powershell_launcher.cmd that starts Windows powershell and
allows me to run the tests and compile the executable from the shell

#+begin_example
set PATH=c:/msys64/mingw64/bin;c:/msys64/usr/bin;%PATH%

powershell
#+end_example

** Running

*** Terminal
Use the ~cd~ command to go to the root of the project and run:
#+begin_example
sbcl --load ./launch.lisp
#+end_example

*** Windows REPL
#+begin_example
(push #p"c:/Users/jacek/Programming/Lisp/clos-sweeper/" asdf:*central-registry*)
(ql:quickload :clos-sweeper)
(clos-sweeper::main)
#+end_example

*** Linux REPL
#+begin_example
(push #p"~/Programming/Lisp/clos-sweeper/" asdf:*central-registry*)
(ql:quickload :clos-sweeper)
(clos-sweeper::main)
#+end_example

** Testing

*** in the terminal
#+begin_example
sbcl --load  ~/Programming/Lisp/clos-sweeper/testing.lisp
#+end_example

*** in the REPL
#+begin_src lisp
  (push #p"~/Programming/Lisp/clos-sweeper/" asdf:*central-registry*)
  (ql:quickload :clos-sweeper/tests)
  (asdf:test-system :clos-sweeper/tests)
#+end_src

Some tests may write a snapshot of the canvas. It goes to /tmp/ on Linux
and on Windows it goes to: C:\Users\jacek\AppData\Local\Temp.
That folder does not get cleared on reboot as /tmp/ on Linux.
You have to clear the ~*.png~ files manually.

** Linting

#+begin_example
(ql:quickload :sblint)
(sblint/run-lint:run-lint-asd "~/Programming/Lisp/clos-sweeper/clos-sweeper.asd" )
#+end_example

** Not implemented

*** Icons
No icons yet, the state of the game is indicated by colour of the tiles.

** Compiling latest sbcl on Windows
I am not sure if roswell will be needed, but I will add the
notes just in case
we need it later.

*** roswell
https://github.com/roswell/roswell/wiki/Installation#windows
#+begin_example
# Windows
pacman -S mingw-w64-x86_64-roswell

# Linux
sudo apt install roswell

# show your default Lisp
ros list installed
#+end_example

https://github.com/roswell/roswell/wiki

https://github.com/roswell/roswell/wiki/How-to-setup-a-lisp-dev-environment-on-windows-with-Roswell

** generating executable
This can generate an executable
but for all our purposes the section Running at the top makes more sense.

#+begin_example
  rm .\src\clos-sweeper.exe
  sh .\builder.ros
  .\src\clos-sweeper.exe
#+end_example

** plan to create distribution
I had asked this question but I had to give up.
https://www.reddit.com/r/Common_Lisp/comments/18jiunr/has_anybody_ever_created_a_windows_and_gtk4/

My plan is to revisit the distribution creation script and
build a folder with  a start script that will
+ Set the correct PATH for the DLLs copied from MSYS2.
+ start my lisp executable

** generating distribution folder

I have fresh installed MSYS2. When I search for PATH in Windows search I get the
Comtrol Panel option:
#+begin_example
Edit environment variables for your account
#+end_example

There is no mention of
#+begin_example
msys64/mingw64/bin
#+end_example
in the Path.

Above in this document I mention Cmd files that allow me to use MSYS2 libraries
to develop on Windows.

I need to prepare a similar ~launch-clos-sweeper.cmd~ that will use a similar
mechanism to load the DLL files copied to distribution folder.

I have the script that copies the ~windows-launcher.cmd~ into
distribution folder and renames it.

The script seems to run fine and sets the expected variables. However we get the
error:
#+begin_example
  Error opening shared object "libgobject-2.0-0.dll":
 The specified module could not be found.
#+end_example

despite the fact that the dll is copied to the bin folder
